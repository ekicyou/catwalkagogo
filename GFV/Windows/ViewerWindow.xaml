<!-- $Id$ -->
<Window x:Class="GFV.Windows.ViewerWindow" x:Name="this"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:gfv="clr-namespace:GFV"
	xmlns:win="clr-namespace:GFV.Windows"
	xmlns:prop="clr-namespace:GFV.Properties"
	xmlns:vm="clr-namespace:GFV.ViewModel"
	xmlns:cwwin="clr-namespace:CatWalk.Windows;assembly=CatWalk.Windows"
	xmlns:gfl="clr-namespace:GflNet;assembly=GflNet"
	SnapsToDevicePixels="True"
	Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
	Title="{Binding Title}"
	Icon="{Binding Icon, Converter={StaticResource GflBitmapToBitmapSourceConverter}}"
	SizeChanged="Window_SizeChanged"
	DataContextChanged="Window_DataContextChanged"
	FocusManager.FocusedElement="{Binding ElementName=_Viewer}">
	<Window.Resources>
		<ResourceDictionary>
			<x:Array Type="MenuItem" x:Key="MainMenu" x:Shared="False">
				<MenuItem Header="{x:Static prop:Resources.ViewerWindow_FileMenu}">
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_OpenMenu}" Command="{Binding OpenFileCommand}"/>
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_OpenInNewWindowMenu}" Command="{Binding OpenFileInNewWindowCommand}"/>
					<Separator />
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_ExitMenu}" Command="{x:Static gfv:Program.ExitCommand}" />
				</MenuItem>
				<MenuItem Header="{x:Static prop:Resources.ViewerWindow_ViewMenu}">
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_AutoImageSizeMenu}">
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_AutoImageSizeNoneMenu}"
						Command="{Binding Viewer.SetFittingModeCommand}" CommandParameter="{x:Static vm:ImageFittingMode.None}"
						IsChecked="{Binding Viewer.FittingMode, Converter={StaticResource ImageFittingModeCheckConverter}, ConverterParameter={x:Static vm:ImageFittingMode.None}}" />
						<Separator />
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_FitToWindowMenu}"
						Command="{Binding Viewer.SetFittingModeCommand}" CommandParameter="{x:Static vm:ImageFittingMode.Window}"
						IsChecked="{Binding Viewer.FittingMode, Converter={StaticResource ImageFittingModeCheckConverter}, ConverterParameter={x:Static vm:ImageFittingMode.Window}}" />
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_FitToWindowLargeOnlyMenu}"
						Command="{Binding Viewer.SetFittingModeCommand}" CommandParameter="{x:Static vm:ImageFittingMode.WindowLargeOnly}"
						IsChecked="{Binding Viewer.FittingMode, Converter={StaticResource ImageFittingModeCheckConverter}, ConverterParameter={x:Static vm:ImageFittingMode.WindowLargeOnly}}" />
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_FitToWidthMenu}"
						Command="{Binding Viewer.SetFittingModeCommand}" CommandParameter="{x:Static vm:ImageFittingMode.WindowWidth}"
						IsChecked="{Binding Viewer.FittingMode, Converter={StaticResource ImageFittingModeCheckConverter}, ConverterParameter={x:Static vm:ImageFittingMode.WindowWidth}}" />
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_FitToWidthLargeOnlyMenu}"
						Command="{Binding Viewer.SetFittingModeCommand}" CommandParameter="{x:Static vm:ImageFittingMode.WindowWidthLargeOnly}"
						IsChecked="{Binding Viewer.FittingMode, Converter={StaticResource ImageFittingModeCheckConverter}, ConverterParameter={x:Static vm:ImageFittingMode.WindowWidthLargeOnly}}" />
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_FitToHeightMenu}"
						Command="{Binding Viewer.SetFittingModeCommand}" CommandParameter="{x:Static vm:ImageFittingMode.WindowHeight}"
						IsChecked="{Binding Viewer.FittingMode, Converter={StaticResource ImageFittingModeCheckConverter}, ConverterParameter={x:Static vm:ImageFittingMode.WindowHeight}}" />
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_FitToHeightLargeOnlyMenu}"
						Command="{Binding Viewer.SetFittingModeCommand}" CommandParameter="{x:Static vm:ImageFittingMode.WindowHeightLargeOnly}"
						IsChecked="{Binding Viewer.FittingMode, Converter={StaticResource ImageFittingModeCheckConverter}, ConverterParameter={x:Static vm:ImageFittingMode.WindowHeightLargeOnly}}" />
					</MenuItem>
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_ResizeMethodMenu}">
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_QuickMethodMenu}"
						Command="{Binding Viewer.SetResizeMethodCommand}" CommandParameter="{x:Static gfl:ResizeMethod.Quick}"
						IsChecked="{Binding Viewer.ResizeMethod, Converter={StaticResource ResizeMethodCheckConverter}, ConverterParameter={x:Static gfl:ResizeMethod.Quick}}" />
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_BilinearMethodMenu}"
						Command="{Binding Viewer.SetResizeMethodCommand}" CommandParameter="{x:Static gfl:ResizeMethod.Bilinear}"
						IsChecked="{Binding Viewer.ResizeMethod, Converter={StaticResource ResizeMethodCheckConverter}, ConverterParameter={x:Static gfl:ResizeMethod.Bilinear}}" />
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_HermiteMethodMenu}"
						Command="{Binding Viewer.SetResizeMethodCommand}" CommandParameter="{x:Static gfl:ResizeMethod.Hermite}"
						IsChecked="{Binding Viewer.ResizeMethod, Converter={StaticResource ResizeMethodCheckConverter}, ConverterParameter={x:Static gfl:ResizeMethod.Hermite}}" />
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_GaussianMethodMenu}"
						Command="{Binding Viewer.SetResizeMethodCommand}" CommandParameter="{x:Static gfl:ResizeMethod.Gaussian}"
						IsChecked="{Binding Viewer.ResizeMethod, Converter={StaticResource ResizeMethodCheckConverter}, ConverterParameter={x:Static gfl:ResizeMethod.Gaussian}}" />
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_BellMethodMenu}"
						Command="{Binding Viewer.SetResizeMethodCommand}" CommandParameter="{x:Static gfl:ResizeMethod.Bell}"
						IsChecked="{Binding Viewer.ResizeMethod, Converter={StaticResource ResizeMethodCheckConverter}, ConverterParameter={x:Static gfl:ResizeMethod.Bell}}" />
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_BSplineMethodMenu}"
						Command="{Binding Viewer.SetResizeMethodCommand}" CommandParameter="{x:Static gfl:ResizeMethod.BSpline}"
						IsChecked="{Binding Viewer.ResizeMethod, Converter={StaticResource ResizeMethodCheckConverter}, ConverterParameter={x:Static gfl:ResizeMethod.BSpline}}" />
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_MitshellMethodMenu}"
						Command="{Binding Viewer.SetResizeMethodCommand}" CommandParameter="{x:Static gfl:ResizeMethod.Mitshell}"
						IsChecked="{Binding Viewer.ResizeMethod, Converter={StaticResource ResizeMethodCheckConverter}, ConverterParameter={x:Static gfl:ResizeMethod.Mitshell}}" />
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_LanczosMethodMenu}"
						Command="{Binding Viewer.SetResizeMethodCommand}" CommandParameter="{x:Static gfl:ResizeMethod.Lanczos}"
						IsChecked="{Binding Viewer.ResizeMethod, Converter={StaticResource ResizeMethodCheckConverter}, ConverterParameter={x:Static gfl:ResizeMethod.Lanczos}}" />
					</MenuItem>
				</MenuItem>
				<MenuItem Header="{x:Static prop:Resources.ViewWindow_WindowMenu}">
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_CloseMenu}" Command="{Binding CloseCommand}" />
				</MenuItem>
				<MenuItem Header="{x:Static prop:Resources.ViewerWindow_HelpMenu}">
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_AboutMenu}" Command="{x:Static gfv:Program.AboutCommand}" />
				</MenuItem>
			</x:Array>
		</ResourceDictionary>
	</Window.Resources>
	<Window.CommandBindings>
		<CommandBinding Command="{x:Static gfv:Program.AboutCommand}" Executed="About_Executed" />
	</Window.CommandBindings>
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="auto" />
			<RowDefinition Height="*" />
			<RowDefinition Height="auto" />
		</Grid.RowDefinitions>
		<Grid Grid.Row="0">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="auto" />
			</Grid.ColumnDefinitions>
			<Menu Grid.Column="0" x:Name="_MainMenu" ItemsSource="{StaticResource MainMenu}"></Menu>
			<Grid Grid.Column="1" Margin="1">
				<ProgressBar Width="100" Value="{Binding ProgressManager.TotalProgress, Mode=OneWay}" Maximum="1">
				</ProgressBar>
				<StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
					<TextBlock Text="{Binding ProgressManager.TotalProgress, Converter={StaticResource DoubleToPercentageConverter}, StringFormat=\{0\} %}" />
				</StackPanel>
				<Grid.Style>
					<Style TargetType="{x:Type Grid}">
						<Style.Triggers>
							<DataTrigger Binding="{Binding ProgressManager.IsBusy}" Value="true">
								<Setter Property="Visibility" Value="Visible" />
							</DataTrigger>
							<DataTrigger Binding="{Binding ProgressManager.IsBusy}" Value="false">
								<Setter Property="Visibility" Value="Collapsed" />
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</Grid.Style>
			</Grid>
		</Grid>
		<win:Viewer Grid.Row ="1" x:Name="_Viewer" DataContext="{Binding Viewer}">
			<win:Viewer.Background>
				<DrawingBrush Stretch="None" Viewport="0,0,32,32" ViewportUnits="Absolute" TileMode="Tile" AlignmentX="Center" AlignmentY="Center">
					<DrawingBrush.Drawing>
						<DrawingGroup>
							<GeometryDrawing Brush="White">
								<GeometryDrawing.Geometry>
									<RectangleGeometry Rect="0,0,32,32" />
								</GeometryDrawing.Geometry>
							</GeometryDrawing>
							<GeometryDrawing Brush="LightGray">
								<GeometryDrawing.Geometry>
									<RectangleGeometry Rect="0,0,16,16" />
								</GeometryDrawing.Geometry>
							</GeometryDrawing>
							<GeometryDrawing Brush="LightGray">
								<GeometryDrawing.Geometry>
									<RectangleGeometry Rect="16,16,16,16" />
								</GeometryDrawing.Geometry>
							</GeometryDrawing>
						</DrawingGroup>
					</DrawingBrush.Drawing>
				</DrawingBrush>
			</win:Viewer.Background>
		</win:Viewer>
	</Grid>
	<Window.TaskbarItemInfo>
		<TaskbarItemInfo ProgressValue="{Binding ProgressManager.TotalProgress}"></TaskbarItemInfo>
	</Window.TaskbarItemInfo>
	<Window.Style>
		<Style TargetType="{x:Type Window}">
			<Style.Triggers>
				<DataTrigger Binding="{Binding ProgressManager.IsBusy}" Value="true">
					<Setter Property="TaskbarItemInfo.ProgressState" Value="Normal" />
				</DataTrigger>
				<DataTrigger Binding="{Binding ProgressManager.IsBusy}" Value="false">
					<Setter Property="TaskbarItemInfo.ProgressState" Value="None" />
				</DataTrigger>
			</Style.Triggers>
		</Style>
	</Window.Style>
</Window>