<!-- $Id$ -->
<Window x:Class="GFV.Windows.ViewerWindow" x:Name="this"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:shell="http://schemas.microsoft.com/winfx/2006/xaml/presentation/shell"
	xmlns:gfv="clr-namespace:GFV"
	xmlns:win="clr-namespace:GFV.Windows"
	xmlns:prop="clr-namespace:GFV.Properties"
	xmlns:vm="clr-namespace:GFV.ViewModel"
	xmlns:gfl="clr-namespace:GflNet;assembly=GflNet"
	xmlns:gfvctl="clr-namespace:GFV.Windows.Controls"
	SnapsToDevicePixels="True"
	Title="{Binding Title}"
	Icon="{Binding Icon, Converter={StaticResource GflBitmapToBitmapSourceOrIconConverter}}"
	SizeChanged="Window_SizeChanged"
	DataContextChanged="Window_DataContextChanged"
	FocusManager.FocusedElement="{Binding ElementName=_Viewer}">
	<Window.Resources>
		<ResourceDictionary>
			<!-- Window Chrome -->
			<Style x:Key="Chrome" TargetType="{x:Type win:ViewerWindow}">
				<Setter Property="shell:WindowChrome.WindowChrome">
					<Setter.Value>
						<shell:WindowChrome
							GlassFrameThickness="-1"
							ResizeBorderThickness="4"
							CaptionHeight="22"
							CornerRadius="4">
						</shell:WindowChrome>
					</Setter.Value>
				</Setter>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type win:ViewerWindow}">
							<Grid DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DataContext}">
								<Grid.Resources>
									<ResourceDictionary>
										<!-- CaptionMenuStyle -->
										<Style x:Key="CaptionMenuStyle" TargetType="{x:Type Menu}" BasedOn="{StaticResource {x:Type Menu}}">
											<Style.Triggers>
												<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=IsActive}" Value="true">
													<Setter Property="Background">
														<Setter.Value>
															<RadialGradientBrush Center="0.5,0.5" RadiusX="1.0" RadiusY="1.0">
																<RadialGradientBrush.GradientStops>
																	<GradientStop Color="{DynamicResource {x:Static SystemColors.ActiveCaptionColorKey}}" Offset="0" />
																	<GradientStop Color="Transparent" Offset="1.0" />
																</RadialGradientBrush.GradientStops>
															</RadialGradientBrush>
														</Setter.Value>
													</Setter>
												</DataTrigger>
												<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=IsActive}" Value="false">
													<Setter Property="Background">
														<Setter.Value>
															<RadialGradientBrush Center="0.5,0.5" RadiusX="1.0" RadiusY="1.0">
																<RadialGradientBrush.GradientStops>
																	<GradientStop Color="{DynamicResource {x:Static SystemColors.InactiveCaptionColorKey}}" Offset="0" />
																	<GradientStop Color="Transparent" Offset="1.0" />
																</RadialGradientBrush.GradientStops>
															</RadialGradientBrush>
														</Setter.Value>
													</Setter>
												</DataTrigger>
											</Style.Triggers>
										</Style>
										<!-- CaptionPanelStyle -->
										<Style x:Key="CaptionPanelStyle" TargetType="{x:Type Panel}">
											<Style.Triggers>
												<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=IsActive}" Value="true">
													<Setter Property="Background">
														<Setter.Value>
															<RadialGradientBrush Center="0.5,0.5" RadiusX="1.0" RadiusY="1.0">
																<RadialGradientBrush.GradientStops>
																	<GradientStop Color="{DynamicResource {x:Static SystemColors.ActiveCaptionColorKey}}" Offset="0" />
																	<GradientStop Color="Transparent" Offset="1.0" />
																</RadialGradientBrush.GradientStops>
															</RadialGradientBrush>
														</Setter.Value>
													</Setter>
												</DataTrigger>
												<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=IsActive}" Value="false">
													<Setter Property="Background">
														<Setter.Value>
															<RadialGradientBrush Center="0.5,0.5" RadiusX="1.0" RadiusY="1.0">
																<RadialGradientBrush.GradientStops>
																	<GradientStop Color="{DynamicResource {x:Static SystemColors.InactiveCaptionColorKey}}" Offset="0" />
																	<GradientStop Color="Transparent" Offset="1.0" />
																</RadialGradientBrush.GradientStops>
															</RadialGradientBrush>
														</Setter.Value>
													</Setter>
												</DataTrigger>
											</Style.Triggers>
										</Style>
										<!-- CaptionTextBlockStyle -->
										<Style x:Key="CaptionTextBlockStyle" TargetType="{x:Type TextBlock}">
											<Setter Property="FontSize" Value="12" />
											<Style.Triggers>
												<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=IsActive}" Value="true">
													<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}" />
												</DataTrigger>
												<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=IsActive}" Value="false">
													<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveCaptionTextBrushKey}}" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
										<Style x:Key="CaptionTextBlockBackStyle" TargetType="{x:Type TextBlock}">
											<Setter Property="FontSize" Value="12" />
											<Setter Property="Effect">
												<Setter.Value>
													<BlurEffect Radius="8" />
												</Setter.Value>
											</Setter>
											<Style.Triggers>
												<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=IsActive}" Value="true">
													<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionBrushKey}}" />
												</DataTrigger>
												<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=IsActive}" Value="false">
													<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveCaptionBrushKey}}" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</ResourceDictionary>
								</Grid.Resources>
								
								<Grid.RowDefinitions>
									<RowDefinition Height="24" />
									<RowDefinition Height="*" />
								</Grid.RowDefinitions>
								<!-- This is the ContentPresenter that displays the window content. -->
								<ContentPresenter Grid.Row="1" Margin="1,0,1,1" Content="{TemplateBinding Content}"/>
								<!-- Window Border Content -->
								<!-- System Button -->
								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="*"/>
										<ColumnDefinition Width="120" />
									</Grid.ColumnDefinitions>
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="auto" />
											<ColumnDefinition Width="auto" />
											<ColumnDefinition Width="auto" />
											<ColumnDefinition Width="*" />
										</Grid.ColumnDefinitions>
										<!-- AppMenu -->
										<Menu
											VerticalAlignment="Top" HorizontalAlignment="Left" Style="{StaticResource CaptionMenuStyle}"
											shell:WindowChrome.IsHitTestVisibleInChrome="True" Margin="4,4,4,0">
											<MenuItem Margin="0" Padding="16,2,16,2" ItemsSource="{DynamicResource AppMenu}">
												<MenuItem.Header>
													<Grid>
														<Grid.ColumnDefinitions>
															<ColumnDefinition Width="auto" />
															<ColumnDefinition Width="*" />
														</Grid.ColumnDefinitions>
														<Image Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Icon}"
															Grid.Column="0" Width="16" Height="16" shell:WindowChrome.IsHitTestVisibleInChrome="True"/>
														<!--<TextBlock Grid.Column="1" VerticalAlignment="Center" TextAlignment="Center" Panel.ZIndex="1"
															Text="{Binding CurrentFilePath, Converter={StaticResource FilePathConverter}, ConverterParameter={x:Static win:FilePathTransform.FileName}, StringFormat=GFV \{0\}"
															FontSize="12" Margin="4,0,4,0" TextTrimming="CharacterEllipsis" Style="{StaticResource CaptionTextBlockStyle}">-->
														<TextBlock Grid.Column="1" VerticalAlignment="Center" TextAlignment="Center" Panel.ZIndex="1"
															Text="GFV" FontSize="12" Margin="4,0,4,0" TextTrimming="CharacterEllipsis" Style="{StaticResource CaptionTextBlockStyle}"
															ToolTip="{TemplateBinding Title}">
														</TextBlock>
														<ProgressBar Grid.Column="1"
															Value="{Binding Path=ProgressManager.TotalProgress, Mode=OneWay}" Maximum="1">
															<ProgressBar.Style>
																<Style TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource {x:Type ProgressBar}}">
																	<Style.Triggers>
																		<DataTrigger Binding="{Binding ProgressManager.IsBusy}" Value="true">
																			<Setter Property="Visibility" Value="Visible" />
																		</DataTrigger>
																		<DataTrigger Binding="{Binding ProgressManager.IsBusy}" Value="false">
																			<Setter Property="Visibility" Value="Collapsed" />
																		</DataTrigger>
																	</Style.Triggers>
																</Style>
															</ProgressBar.Style>
														</ProgressBar>
													</Grid>
												</MenuItem.Header>
												<MenuItem.ItemsPanel>
													<ItemsPanelTemplate>
														<Grid>
															<Grid.ColumnDefinitions>
																<ColumnDefinition Width="auto" />
																<ColumnDefinition Width="auto" />
															</Grid.ColumnDefinitions>
															<Grid.RowDefinitions>
																<RowDefinition Height="auto" />
																<RowDefinition Height="auto" />
																<RowDefinition Height="auto" />
																<RowDefinition Height="auto" />
																<RowDefinition Height="auto" />
																<RowDefinition Height="auto" />
															</Grid.RowDefinitions>
														</Grid>
													</ItemsPanelTemplate>
												</MenuItem.ItemsPanel>
											</MenuItem>
										</Menu>

										<!-- Scale Menu -->
										<Menu Grid.Column="1"
											VerticalAlignment="Top" HorizontalAlignment="Left" Style="{StaticResource CaptionMenuStyle}"
											shell:WindowChrome.IsHitTestVisibleInChrome="True" Margin="4,4,4,0">
											<gfvctl:ScaleMenuItem>
												<gfvctl:ScaleMenuItem.Header>
													<StackPanel Orientation="Horizontal">
														<TextBlock Style="{StaticResource CaptionTextBlockStyle}" Text="{Binding Viewer.CurrentBitmap.Width}"/>
														<TextBlock Style="{StaticResource CaptionTextBlockStyle}" Text=" x " />
														<TextBlock Style="{StaticResource CaptionTextBlockStyle}" Text="{Binding Viewer.CurrentBitmap.Height}"/>
														<TextBlock Style="{StaticResource CaptionTextBlockStyle}" Text=" : " />
														<TextBlock Style="{StaticResource CaptionTextBlockStyle}" Text="{Binding Viewer.Scale, Converter={StaticResource DoubleToPercentageConverter}, StringFormat=\{0\} %}"/>
													</StackPanel>
												</gfvctl:ScaleMenuItem.Header>
											</gfvctl:ScaleMenuItem>
										</Menu>
										<TextBlock Grid.Column="2" Style="{StaticResource CaptionTextBlockBackStyle}" VerticalAlignment="Center"
											Text="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=DataContext.CurrentFilePath, Converter={StaticResource FilePathConverter}, ConverterParameter={x:Static win:FilePathTransform.FileName}}">
										</TextBlock>
										<TextBlock Grid.Column="2" Style="{StaticResource CaptionTextBlockStyle}" VerticalAlignment="Center"
											Text="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=DataContext.CurrentFilePath, Converter={StaticResource FilePathConverter}, ConverterParameter={x:Static win:FilePathTransform.FileName}}">
										</TextBlock>
									</Grid>
								</Grid>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<!-- AppMenu -->
			<x:Array Type="FrameworkElement" x:Key="AppMenu" x:Shared="False">
				<MenuItem Grid.Row="0" Header="{x:Static prop:Resources.ViewerWindow_OpenMenu}" Command="{Binding OpenFileCommand}" InputGestureText="{Binding OpenFileCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}"/>
				<Separator Grid.Row="1"/>
				<MenuItem Grid.Row="2" Header="{x:Static prop:Resources.ViewerWindow_NextFileMenu}" Command="{Binding NextFileCommand}" InputGestureText="{Binding NextFileCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}" />
				<MenuItem Grid.Row="3" Header="{x:Static prop:Resources.ViewerWindow_PreviousFileMenu}" Command="{Binding PreviousFileCommand}" InputGestureText="{Binding PreviousFileCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}" />
				<Separator Grid.Row="4" />
				<MenuItem Grid.Row="5" Header="{x:Static prop:Resources.ViewerWindow_CloseMenu}" Command="{Binding CloseCommand}" InputGestureText="{Binding CloseCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}"/>

				<MenuItem Grid.Row="0" Grid.Column="1" Header="{x:Static prop:Resources.ViewerWindow_WindowMenu}">
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_OpenNewWindowMenu}" Command="{Binding OpenNewWindowCommand}" InputGestureText="{Binding OpenNewWindowCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}"/>
					<Separator />
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_OpenInNewWindowMenu}" Command="{Binding OpenFileInNewWindowCommand}" InputGestureText="{Binding OpenFileInNewWindowCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}"/>
					<Separator />
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_CascadeMenu}" Command="{Binding ArrangeWindowsCommand}" InputGestureText="{Binding ArrangeWindowsCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}" CommandParameter="{x:Static vm:ArrangeMode.Cascade}"/>
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_TileHorizontalMenu}" Command="{Binding ArrangeWindowsCommand}" InputGestureText="{Binding ArrangeWindowsCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}" CommandParameter="{x:Static vm:ArrangeMode.TileHorizontal}"/>
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_TileVerticalMenu}" Command="{Binding ArrangeWindowsCommand}" InputGestureText="{Binding ArrangeWindowsCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}" CommandParameter="{x:Static vm:ArrangeMode.TileVertical}"/>
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_StackHorizontalMenu}" Command="{Binding ArrangeWindowsCommand}" InputGestureText="{Binding ArrangeWindowsCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}" CommandParameter="{x:Static vm:ArrangeMode.StackHorizontal}"/>
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_StackVerticalMenu}" Command="{Binding ArrangeWindowsCommand}" InputGestureText="{Binding ArrangeWindowsCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}" CommandParameter="{x:Static vm:ArrangeMode.StackVertical}"/>
				</MenuItem>
				<MenuItem Grid.Row="1" Grid.Column="2" Header="{x:Static prop:Resources.ViewerWindow_RecentFilesMenu}"
					ItemsSource="{Binding Source={x:Static prop:Settings.Default}, Path=RecentFiles, Converter={StaticResource RecentFilesMenuItemConverter}}">
					<MenuItem.ItemContainerStyle>
						<Style TargetType="{x:Type MenuItem}">
							<Setter Property="Command" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Menu}, Mode=FindAncestor}, Path=DataContext.OpenFileCommand}" />
							<Setter Property="CommandParameter" Value="{Binding Value}" />
							<Setter Property="Icon" Value="{Binding Path=Value, Converter={StaticResource ShellIconImageConverter}}" />
						</Style>
					</MenuItem.ItemContainerStyle>
					<MenuItem.ItemTemplate>
						<DataTemplate>
							<StackPanel Orientation="Horizontal" VerticalAlignment="Center">
								<AccessText Text="{Binding Key}"></AccessText>
								<TextBlock Text=" " />
								<TextBlock Text="{Binding Value}"></TextBlock>
							</StackPanel>
						</DataTemplate>
					</MenuItem.ItemTemplate>
				</MenuItem>
				<Separator Grid.Row="2" Grid.Column="1"/>
				<MenuItem Grid.Row="3" Grid.Column="1" Header="{x:Static prop:Resources.ViewerWindow_HelpMenu}">
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_ShowMenubarMenu}" Command="{Binding ShowMenubarCommand}"
						IsChecked="{Binding Source={x:Static prop:Settings.Default}, Path=IsShowMenubar, Converter={StaticResource NullableConverter}, ConverterParameter=false}" />
					<Separator />
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_CheckUpdatesMenu}" Command="{Binding Source={x:Static gfv:Program.CurrentProgram}, Path=CheckUpdatesCommand}" InputGestureText="{Binding Source={x:Static gfv:Program.CurrentProgram}, Path=CheckUpdatesCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}" />
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_CheckUpdatesOnStartupMenu}" IsCheckable="true" IsChecked="{Binding Source={x:Static prop:Settings.Default}, Path=IsCheckUpdatesOnStartup, Mode=TwoWay}" />
					<Separator />
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_AboutMenu}" Command="{Binding AboutCommand}" InputGestureText="{Binding AboutCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}" CommandParameter="{Binding ElementName=this}" />
				</MenuItem>
				<Separator Grid.Row="4" Grid.Column="1" />
				<MenuItem Grid.Row="5" Grid.Column="1" Header="{x:Static prop:Resources.ViewerWindow_ExitMenu}" Command="{Binding ExitCommand}"  InputGestureText="{Binding ExitCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}"/>
			</x:Array>
			
			<!-- MainMenu -->
			<x:Array Type="MenuItem" x:Key="MainMenu" x:Shared="False">
				<MenuItem Header="{x:Static prop:Resources.ViewerWindow_FileMenu}">
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_OpenMenu}" Command="{Binding OpenFileCommand}" InputGestureText="{Binding OpenFileCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}"/>
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_OpenInNewWindowMenu}" Command="{Binding OpenFileInNewWindowCommand}" InputGestureText="{Binding OpenFileInNewWindowCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}"/>
					<Separator />
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_NextFileMenu}" Command="{Binding NextFileCommand}" InputGestureText="{Binding NextFileCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}"/>
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_PreviousFileMenu}" Command="{Binding PreviousFileCommand}" InputGestureText="{Binding PreviousFileCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}"/>
					<Separator />
					<MenuItem Grid.Row="1" Grid.Column="2" Header="{x:Static prop:Resources.ViewerWindow_RecentFilesMenu}"
						ItemsSource="{Binding Source={x:Static prop:Settings.Default}, Path=RecentFiles, Converter={StaticResource RecentFilesMenuItemConverter}}">
						<MenuItem.ItemContainerStyle>
							<Style TargetType="{x:Type MenuItem}">
								<Setter Property="Command" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Menu}, Mode=FindAncestor}, Path=DataContext.OpenFileCommand}" />
								<Setter Property="CommandParameter" Value="{Binding Value}" />
								<Setter Property="Icon" Value="{Binding Path=Value, Converter={StaticResource ShellIconImageConverter}}" />
							</Style>
						</MenuItem.ItemContainerStyle>
						<MenuItem.ItemTemplate>
							<DataTemplate>
								<StackPanel Orientation="Horizontal" VerticalAlignment="Center">
									<AccessText Text="{Binding Key}"></AccessText>
									<TextBlock Text=" " />
									<TextBlock Text="{Binding Value}"></TextBlock>
								</StackPanel>
							</DataTemplate>
						</MenuItem.ItemTemplate>
					</MenuItem>
					<Separator />
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_ExitMenu}" Command="{Binding ExitCommand}"  InputGestureText="{Binding ExitCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}"/>
				</MenuItem>
				<MenuItem Header="{x:Static prop:Resources.ViewerWindow_ViewMenu}">
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_ShowMenubarMenu}" Command="{Binding ShowMenubarCommand}"
						IsChecked="{Binding Source={x:Static prop:Settings.Default}, Path=IsShowMenubar, Converter={StaticResource NullableConverter}, ConverterParameter=false}"
						IsEnabled="{Binding Source={x:Static shell:SystemParameters2.Current}, Path=IsGlassEnabled}"/>
					<Separator />
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_AutoImageSizeMenu}">
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_AutoImageSizeNoneMenu}"
							Command="{Binding Viewer.SetFittingModeCommand}" CommandParameter="{x:Static vm:ImageFittingMode.None}"
							IsChecked="{Binding Viewer.FittingMode, Converter={StaticResource ImageFittingModeCheckConverter}, ConverterParameter={x:Static vm:ImageFittingMode.None}}" />
						<Separator />
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_FitToWindowMenu}"
							Command="{Binding Viewer.SetFittingModeCommand}" CommandParameter="{x:Static vm:ImageFittingMode.Window}"
							IsChecked="{Binding Viewer.FittingMode, Converter={StaticResource ImageFittingModeCheckConverter}, ConverterParameter={x:Static vm:ImageFittingMode.Window}}" />
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_FitToWindowLargeOnlyMenu}"
							Command="{Binding Viewer.SetFittingModeCommand}" CommandParameter="{x:Static vm:ImageFittingMode.WindowLargeOnly}"
							IsChecked="{Binding Viewer.FittingMode, Converter={StaticResource ImageFittingModeCheckConverter}, ConverterParameter={x:Static vm:ImageFittingMode.WindowLargeOnly}}" />
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_FitToWidthMenu}"
							Command="{Binding Viewer.SetFittingModeCommand}" CommandParameter="{x:Static vm:ImageFittingMode.WindowWidth}"
							IsChecked="{Binding Viewer.FittingMode, Converter={StaticResource ImageFittingModeCheckConverter}, ConverterParameter={x:Static vm:ImageFittingMode.WindowWidth}}" />
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_FitToWidthLargeOnlyMenu}"
							Command="{Binding Viewer.SetFittingModeCommand}" CommandParameter="{x:Static vm:ImageFittingMode.WindowWidthLargeOnly}"
							IsChecked="{Binding Viewer.FittingMode, Converter={StaticResource ImageFittingModeCheckConverter}, ConverterParameter={x:Static vm:ImageFittingMode.WindowWidthLargeOnly}}" />
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_FitToHeightMenu}"
							Command="{Binding Viewer.SetFittingModeCommand}" CommandParameter="{x:Static vm:ImageFittingMode.WindowHeight}"
							IsChecked="{Binding Viewer.FittingMode, Converter={StaticResource ImageFittingModeCheckConverter}, ConverterParameter={x:Static vm:ImageFittingMode.WindowHeight}}" />
						<MenuItem Header="{x:Static prop:Resources.ViewerWindow_FitToHeightLargeOnlyMenu}"
							Command="{Binding Viewer.SetFittingModeCommand}" CommandParameter="{x:Static vm:ImageFittingMode.WindowHeightLargeOnly}"
							IsChecked="{Binding Viewer.FittingMode, Converter={StaticResource ImageFittingModeCheckConverter}, ConverterParameter={x:Static vm:ImageFittingMode.WindowHeightLargeOnly}}" />
						<MenuItem Grid.Column="1" Grid.Row="8" Header="{x:Static prop:Resources.ViewerWindow_FitToShorterEdge}"
							Command="{Binding Viewer.SetFittingModeCommand}" CommandParameter="{x:Static vm:ImageFittingMode.ShorterEdge}"
							IsChecked="{Binding Viewer.FittingMode, Converter={StaticResource ImageFittingModeCheckConverter}, ConverterParameter={x:Static vm:ImageFittingMode.ShorterEdge}}" />
						<MenuItem Grid.Column="1" Grid.Row="9" Header="{x:Static prop:Resources.ViewerWindow_FitToShorterEdgeLargeOnly}"
							Command="{Binding Viewer.SetFittingModeCommand}" CommandParameter="{x:Static vm:ImageFittingMode.ShorterEdgeLargeOnly}"
							IsChecked="{Binding Viewer.FittingMode, Converter={StaticResource ImageFittingModeCheckConverter}, ConverterParameter={x:Static vm:ImageFittingMode.ShorterEdgeLargeOnly}}" />
						<MenuItem Grid.Column="1" Grid.Row="10" Header="{x:Static prop:Resources.ViewerWindow_FitToLongerEdge}"
							Command="{Binding Viewer.SetFittingModeCommand}" CommandParameter="{x:Static vm:ImageFittingMode.LongerEdge}"
							IsChecked="{Binding Viewer.FittingMode, Converter={StaticResource ImageFittingModeCheckConverter}, ConverterParameter={x:Static vm:ImageFittingMode.LongerEdge}}" />
						<MenuItem Grid.Column="1" Grid.Row="11" Header="{x:Static prop:Resources.ViewerWindow_FitToLongerEdgeLargeOnly}"
							Command="{Binding Viewer.SetFittingModeCommand}" CommandParameter="{x:Static vm:ImageFittingMode.LongerEdgeLargeOnly}"
							IsChecked="{Binding Viewer.FittingMode, Converter={StaticResource ImageFittingModeCheckConverter}, ConverterParameter={x:Static vm:ImageFittingMode.LongerEdgeLargeOnly}}" />
					</MenuItem>
				</MenuItem>
				<gfvctl:ScaleMenuItem Header="{x:Static prop:Resources.ViewerWindow_ScaleMenu}">

				</gfvctl:ScaleMenuItem>
				<MenuItem Header="{x:Static prop:Resources.ViewerWindow_WindowMenu}">
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_OpenNewWindowMenu}" Command="{Binding OpenNewWindowCommand}" InputGestureText="{Binding OpenNewWindowCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}"/>
					<Separator />
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_CascadeMenu}" Command="{Binding ArrangeWindowsCommand}" InputGestureText="{Binding ArrangeWindowsCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}" CommandParameter="{x:Static vm:ArrangeMode.Cascade}"/>
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_TileHorizontalMenu}" Command="{Binding ArrangeWindowsCommand}" InputGestureText="{Binding ArrangeWindowsCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}" CommandParameter="{x:Static vm:ArrangeMode.TileHorizontal}"/>
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_TileVerticalMenu}" Command="{Binding ArrangeWindowsCommand}" InputGestureText="{Binding ArrangeWindowsCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}" CommandParameter="{x:Static vm:ArrangeMode.TileVertical}"/>
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_StackHorizontalMenu}" Command="{Binding ArrangeWindowsCommand}" InputGestureText="{Binding ArrangeWindowsCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}" CommandParameter="{x:Static vm:ArrangeMode.StackHorizontal}"/>
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_StackVerticalMenu}" Command="{Binding ArrangeWindowsCommand}" InputGestureText="{Binding ArrangeWindowsCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}" CommandParameter="{x:Static vm:ArrangeMode.StackVertical}"/>
					<Separator />
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_CloseMenu}" Command="{Binding CloseCommand}" InputGestureText="{Binding CloseCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}"/>
				</MenuItem>
				<MenuItem Header="{x:Static prop:Resources.ViewerWindow_HelpMenu}">
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_CheckUpdatesMenu}" Command="{Binding Source={x:Static gfv:Program.CurrentProgram}, Path=CheckUpdatesCommand}" InputGestureText="{Binding Source={x:Static gfv:Program.CurrentProgram}, Path=CheckUpdatesCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}" />
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_CheckUpdatesOnStartupMenu}" IsCheckable="true" IsChecked="{Binding Source={x:Static prop:Settings.Default}, Path=IsCheckUpdatesOnStartup, Mode=TwoWay}" />
					<Separator />
					<MenuItem Header="{x:Static prop:Resources.ViewerWindow_AboutMenu}" Command="{Binding AboutCommand}" InputGestureText="{Binding AboutCommand.InputBindings, Converter={StaticResource InputBindingsToTextConverter}}" CommandParameter="{Binding ElementName=this}" />
				</MenuItem>
			</x:Array>
		</ResourceDictionary>
	</Window.Resources>
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="auto" />
			<RowDefinition Height="*" />
			<RowDefinition Height="auto" />
		</Grid.RowDefinitions>
		
		<!-- Menubar -->
		<Grid Grid.Row="0" IsVisibleChanged="Menubar_VisibilityChanged">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="auto" />
				<ColumnDefinition Width="*" />
			</Grid.ColumnDefinitions>
			<Grid.Style>
				<Style TargetType="{x:Type Grid}">
					<Style.Triggers>
						<DataTrigger Binding="{Binding Source={x:Static prop:Settings.Default}, Path=IsShowMenubar}" Value="true">
							<Setter Property="Visibility" Value="Visible" />
						</DataTrigger>
						<DataTrigger Binding="{Binding Source={x:Static prop:Settings.Default}, Path=IsShowMenubar}" Value="false">
							<Setter Property="Visibility" Value="Collapsed" />
						</DataTrigger>
						<DataTrigger Binding="{Binding Source={x:Static shell:SystemParameters2.Current}, Path=IsGlassEnabled}" Value="false">
							<Setter Property="Visibility" Value="Visible" />
						</DataTrigger>
					</Style.Triggers>
				</Style>
			</Grid.Style>
			<Menu Grid.Column="0" x:Name="_MainMenu" ItemsSource="{StaticResource MainMenu}"></Menu>
			<Grid Grid.Column="1" Margin="1">
				<ProgressBar Width="100" Value="{Binding ProgressManager.TotalProgress, Mode=OneWay}" Maximum="1">
				</ProgressBar>
				<StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
					<TextBlock Text="{Binding ProgressManager.TotalProgress, Converter={StaticResource DoubleToPercentageConverter}, StringFormat=\{0\} %}" />
				</StackPanel>
				<Grid.Style>
					<Style TargetType="{x:Type Grid}">
						<Style.Triggers>
							<DataTrigger Binding="{Binding ProgressManager.IsBusy}" Value="true">
								<Setter Property="Visibility" Value="Visible" />
							</DataTrigger>
							<DataTrigger Binding="{Binding ProgressManager.IsBusy}" Value="false">
								<Setter Property="Visibility" Value="Collapsed" />
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</Grid.Style>
			</Grid>
		</Grid>
		
		<!-- Viewer -->
		<win:Viewer Grid.Row ="1" x:Name="_Viewer" DataContext="{Binding Viewer}">
			<!--<win:Viewer.Background>
				<DrawingBrush Stretch="None" Viewport="0,0,32,32" ViewportUnits="Absolute" TileMode="Tile" AlignmentX="Center" AlignmentY="Center">
					<DrawingBrush.Drawing>
						<DrawingGroup>
							<GeometryDrawing Brush="White">
								<GeometryDrawing.Geometry>
									<RectangleGeometry Rect="0,0,32,32" />
								</GeometryDrawing.Geometry>
							</GeometryDrawing>
							<GeometryDrawing Brush="LightGray">
								<GeometryDrawing.Geometry>
									<RectangleGeometry Rect="0,0,16,16" />
								</GeometryDrawing.Geometry>
							</GeometryDrawing>
							<GeometryDrawing Brush="LightGray">
								<GeometryDrawing.Geometry>
									<RectangleGeometry Rect="16,16,16,16" />
								</GeometryDrawing.Geometry>
							</GeometryDrawing>
						</DrawingGroup>
					</DrawingBrush.Drawing>
				</DrawingBrush>
			</win:Viewer.Background>-->
		</win:Viewer>
	</Grid>
	
	<!-- Taskbar -->
	<Window.TaskbarItemInfo>
		<TaskbarItemInfo ProgressValue="{Binding ProgressManager.TotalProgress}"></TaskbarItemInfo>
	</Window.TaskbarItemInfo>
	<Window.Style>
		<Style TargetType="{x:Type Window}">
			<Style.Triggers>
				<DataTrigger Binding="{Binding ProgressManager.IsBusy}" Value="true">
					<Setter Property="TaskbarItemInfo.ProgressState" Value="Normal" />
				</DataTrigger>
				<DataTrigger Binding="{Binding ProgressManager.IsBusy}" Value="false">
					<Setter Property="TaskbarItemInfo.ProgressState" Value="None" />
				</DataTrigger>
			</Style.Triggers>
		</Style>
	</Window.Style>
</Window>